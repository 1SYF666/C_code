#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
#include<string.h>
#include<assert.h>

void* my_memcpy(void* dest, void* src, size_t count)
{
	char* ret = dest;
	assert(dest != NULL);
	assert(src != NULL);
	while (count--)
	{
		*(char*)dest = *(char*)src;
		//(char*)dest++;
		//(char*)src++;
		//上面这样写不对，因为强制类型转换优先级比"++"优先级要晚，故先执行“++”所以报错
		//所以改变一下方式
		++(char*)dest;
		++(char*)src;
		//两种类型都是使指针加一
	}
	return ret;
}
void* my_memmove(void* dest, const void* src, size_t count)
{
	void* ret = dest;
	assert(dest != NULL);
	assert(src != NULL);
	//if (dest<src || dest>(char*)src + count)
	//{
	//	//前—>后
	//}
	//else
	//{
	//	//后—>前

	//}

	if (dest < src)
	{
		//从前向后
		while (count--)
		{
			*(char*)dest == *(char*)src;
			++(char*)dest;
			++(char*)src;
		}
	}
	else
	{
		//从后向前
		while (count--)
		{
			*((char*)dest + count) == *((char*)src + count);
		}
	}
	return ret;
}
/*
int main()
{
	//int arr1[] = { 1,2,3,4,5 };
	//int arr2[10] = { 0 };
	//my_memcpy(arr2, arr1, sizeof(arr1));
	int arr3[] = { 1,2,3,4,5,6,7,8,9,10 };
	//my_memcpy(arr3+2, arr3, 20);
	//memmove(arr3+2, arr3, 20);
	//memcpy(arr3+2, arr3, 20);
	//C语言标准说：memcpy函数可以拷贝不重叠的就可以了
	//当下发现：VS219环境下的memcpy可以处理重叠拷贝
	my_memmove(arr3 + 2, arr3, 20);
	return 0;
}
*/
/*
int main()
{
	int arr1[] = { 1,2,3,4,5 };
	int arr2[] = { 1,2,5,4,3 };
	int ret = memcmp(arr1, arr2, 9);//比较前8个字节,小端存放
	printf("%d\n", ret);
	return 0;
}
*/

//memset——内存设置
int main()
{
	char arr[10] = "";
	memset(arr, "#", 10);		//把arr内存中改为10个字节大小的“#”
	return 0;
}

