#define _CRT_SECURE_NO_WARNINGS 1

#include <stdio.h>
#include <string.h>
/*

int main()
{
	//二维数组
	int a[3][4] = { 0 };
	printf("%p\n", &a[0][0]);
	printf("%p\n", &a[0][0]);
	printf("%d\n", sizeof(a));				//a这里表示的是整个数组，故是48个字节
	printf("%d\n", sizeof(a[0][0]));		//4个字节
	//a[0]可以表示第一行数组的数组名，故计算的是第一行大小
	printf("%d\n", sizeof(a[0]));			//4 * 4 = 16 个字节
	//a[0]可以表示第一行数组的数组名,也是首元素的地址，a[0] + 1是第一行第二个元素的地址
	printf("%d\n", sizeof(a[0] + 1));		//4或者8个字节
	//a[0] + 1是第一行第二个元素的地址,再解引用就是 第一行第二个元素 计算得到是4个字节
	printf("%d\n", sizeof(*(a[0] + 1)));	//（把第二行首元素传给sizeof()）这里写错了，故是4个字节
	//a+1是谁的地址？a是二维数组的数组名，没有sizeof（数组名），也没有&（数组名），所以a是首元素的地址
	//而二维数组看成一维数组时，二维数组的首元素是他的第一行，a就是第一行（首元素）的地址
	//a+1就是第二行地址
	printf("%d\n", sizeof(a + 1));			//这里表示数组地址再跳过一个数组的地址，故4或者8个字节
	//a+1就是第二行地址,再解引用就是第二行的数组，故是16个字节
	printf("%d\n", sizeof(*(a + 1)));		//4*4 = 16
	//a[0]是第一行的数组名，&a[0]是第一的地址，再加1就是第二行的地址
	printf("%d\n", sizeof(&a[0] + 1));		//4或者8个字节
	printf("%d\n", sizeof(*(&a[0] + 1)));	//第二行数组，4*4=16
	//a是第一行地址，a是首元素地址，*a就是第一行
	printf("%d\n", sizeof(*a));				//为4*4= 16 个字节
	printf("%d\n", sizeof(a[3]));			//第四行数组，因此就是 4 * 4 = 16 个字节
	return 0;
}
