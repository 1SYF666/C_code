#define _CRT_SECURE_NO_WARNINGS 1
#include <stdio.h>

/*
int main()
{
	//字符指针
	char ch = 'w';
	char* p = &ch;
	const char* p2 = "abcdef";
	//指针数组
	int* arr[10];
	//数组指针
	int arr2[5];
	int(*pa)[5] = &arr2;//取出数组的地址，数组里每个元素是整形
	return 0;
}
*/

/*
void test(int arr[])//ok
{}
void test(int arr[10])//ok
{}
void test(int* arr)//ok
{}
void test2(int* arr[20])//ok
{}
void test2(int** arr)//ok
{}
int main()
{
	int arr[10] = { 0 };
	int* arr2[20] = { 0 };
	test(arr);
	test2(arr2);
}
*/

void test(int arr[3][5]){}
void test1(int arr[][5]){}
int main()
{
	int arr[3][5] = { 0 };
	test(arr);
	test1(arr);

	return 0;
}



//void print(int* p, int sz)
//{
//	int i = 0;
//	for (i = 0; i < sz; i++)
//	{
//		printf("%d\n", *(p + i));
//	}
//}
//int main()
//{
//	int arr[10] = { 1,2,3,4,5,6,7,8,9 };
//	int* p = arr;
//	int sz = sizeof(arr) / sizeof(arr[0]);
//	//一级指针p，传给函数
//	print(p, sz);
//	return 0;
//}
/*
void test(int** ptr)
{
	printf("num = %d\n", **ptr);
}
int main()
{
	int n = 10;
	int* p = &n;
	int** pp = &p;	
	test(pp);
	test(&p);
    //指针数组
	int* arr[10];
	test(arr);

	return 0;
}*/

//函数指针——是指向函数的指针,存放函数的地址
//数组指针——是指向数组的指针，存放数组的地址

/*
int Add(int x, int y)
{
	return x + y;
}
int main()
{
	int a = 0;
	int b = 3;
	int arr[10] = {0};
	int(*p)[10] = &arr;
	int (*pa)(int, int) = Add;
	printf("%d\n", Add(a, b));
	//&函数名和函数名 都是函数的地址
	printf("%p\n", &Add);
	printf("%p\n", Add);
	printf("%d\n", (*pa)(2,3));
	//pa指函数的地址，(*pa)找到这个函数，(*pa)(2,3)开始调用这个函数

	return 0;
}*/


void print(char* str)
{
	printf("%s\n", str);
}
int main()
{
	void (*pa)(char*) = print;
	//printf("%s\n",(*pa)("hello bit"));
    (*pa)("hello bit");
	return 0;
}

