#define _CRT_SECURE_NO_WARNINGS 1
#define N_VALUES 5
#include <stdio.h>

//int main()
//{
//	int a = 0;
//	int* p = &a;
//
//	return 0;
//}

//指针和指针类型
//int main()
//{
//
//	//printf("%d\n", sizeof(char*));
//	//printf("%d\n", sizeof(short*));
//	//printf("%d\n", sizeof(int*));
//	//printf("%d\n", sizeof(double*));
//
//	int a = 0x11223344;
//	/*int* pa = &a;
//	*pa = 0;*/
//	
//	char* pa = &a;
//	*pa = 0;
//
//	return 0;
//}
//
//int main()
//{
//	int a = 0x11223344;
//	int* pa = &a;
//	char* pc = &a;
//	printf("%p\n", pa);
//	printf("%p\n", pa+1);
//	printf("%p\n", pc);
//	printf("%p\n", pc+1);
//
//
//	return 0;
//}

//int main()
//{
//	int arr[10] = { 0 };
//	char* p = arr;
//	int i = 0;
//	for (i = 0; i < 10; i++)
//	{
//		*(p + i) = 1;
//	}
//
//	return 0;
//}


//指针越界访问、指针只想那块指针释放了、会产生野指针，
//int main()
//{
//	//指针未初始化也变成野指针了
//	int arr[10] = { 0 };
//	int* p = arr;
//	int i = 0;
//	//超过数组长度就变成野指针了
//	for (i = 0; i < 15; i++)
//	{
//		*(p + i) = 1;
//	}
//	return 0;
//}
// 
//指针指向那块指针释放了、会产生野指针
//int* test()
//{
//	int a = 3;
//	return &a;
//}
//
//int main()
//{
//	int* p = test();
//	*p = 20;
//
//	return 0;
//}
//
//int main()
//{
//	/*int* p;
//	*p = 20;*/
//	int arr[10] = { 0 };
//	int i = 0;
//	int* p = arr;
//	for (i = 0; i < 12; i++)
//	{
//		//++优先级高于*
//		//*p++ = i;
//		*p = i;
//		p++;
//	}
//	return 0;
//}

//int* test()
//{
//	/*int a = 10;
//	return &a;*/
//	int arr[10] = { 0 };
//	return arr;
//}
//
//int main()
//{
//	int* p = test();
//	printf("before:%d\n", *p);
//	
//
//}


//int main()
//{
//	int arr[10] = { 1,2,3,4,5,6,7,8,9,10 };
//	int i = 0;
//	int sz = sizeof(arr) / sizeof(arr[0]);
//	int* p = arr;
//	/*for (i = 0; i < sz; i++)
//	{
//		printf("%d ", *p);
//			p++;
//	}*/
//
//	for (i = 0; i < 5; i++)
//	{
//		printf("%d ", *p);
//		p += 2;
//	}
//
//	return 0;
//}

//int main()
//{
//	
//	float values[N_VALUES];
//	float* vp;
//
//	//指针+-整数；指针的关系运算比较大小
//	for (vp = &values[0]; vp < &values[N_VALUES];)
//	{
//		*vp++ = 0;
//	}
//}

//int main()
//{
//	//指针减指针等于元素的个数
//	int arr[10] = { 1,2,3,4,5,6,7,8,9,13 };
//	printf("%d\n", &arr[9]-&arr[0]);
//
//	return 0;
//}

//int my_strlen(char* arr)
//{
//	char* start = arr;
//	char* end = arr;
//	while (*end != '\0')
//	{
//		end++;
//	}
//	
//	return end - start;
//}
//
//int main()
//{
//	//strlen - 求字符串长度
//	//递归-模拟实现了strlen-计数器的方式1，递归的方式2
//	char arr[] = "bit";
//	int len = my_strlen(arr);
//	printf("%d\n", len);
//
//	return 0;
//}

//int main()
//{
//
//	int arr[10] = { 0 };
//	printf("%p\n", arr);//地址，首元素的地址
//	printf("%p\n", arr+1);
//	printf("%p\n", &arr[0]);
//	printf("%p\n", &arr[0]+1);
//	printf("%p\n", &arr);//打印整个数组的地址
//	printf("%p\n", &arr + 1);
//	//1.&arr-&数组名-数组名不是首元素的地址-数组名表示是整个数组-&数组名 取出是的是整个数组的地址
//	//2.sizeof(arr) - sizeof(数组名) - 数组名表示的是整个数组 -sizeof(数组名)计算的是整个数组的大小
//	return 0;
//}

//int main()
//{
//	int arr[10] = { 0 };
//	int* p = arr;
//	int i = 0;
//	for (i = 0; i < 10; i++)
//	{
//		*(p + i) = i;
//		printf("%d ", arr[i]);
//	}
//
//	/*for (i = 0; i < 10; i++)
//	{
//		printf("%p  =======  %p\n", p + i, &arr[i]);
//	}*/
//
//	return 0;
//}

//int a=10--------a是一个变量（盒子名字），存放的内容是10（盒子里放的内容），
// 变量a是有地址的（该盒子放的位置）
//int* p=&a-------p是指针变量（盒子名字），存放的内容是a的地址（盒子里放的内容），
// 该指针变量p是有地址的（该盒子放的位置）
//“int*”中*表明p是指针变量，int是指这个指针指向的对象是整型int
//int main()
//{
//	int a = 0;
//	int* pa = &a;
//	int** ppa = &pa;//二级指针
//	printf("%d\n", **ppa);
//	**ppa = 10;
//	printf("%d\n", **ppa);
//	return 0;
//}

//好孩子 -- 孩子
//指针数组 -- 数组
//数组指针 -- 指针
int main()
{
	int a = 10;
	int b = 20;
	int c = 30;
	int* pa = &a;
	int* pb = &b;
	int* pc = &c;
	//整形数组 -存放整型
	//字符数组 -存放字符
	//指针数组 -存放指针
	//int arr[10];
	int* arr2[3] = { &a,&b,&c };//指针数组
	int i = 0;
	for (i = 0; i < 3; i++)
	{
		printf("%d ", *(arr2[i]));
	}


	return 0;
}
