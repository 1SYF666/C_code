#define _CRT_SECURE_NO_WARNINGS 1
#include <iostream>
#include <string.h>
using namespace std;

//类对象作为类成员
/*
class Phone
{
public:
	Phone(string pName)
	{
		cout << "Phone构造函数的调用" << endl;
		m_PName = pName;
	}
	string m_PName;

};

class Person
{
public:
	Person(string name, string pName):m_Name(name),m_Phone(pName)
	{
		cout << "Person的构造函数调用" << endl;
	}

	//姓名
	string m_Name;
	//手机
	Phone m_Phone;
};

void test01()
{
	Person p("张三","oppo");
	cout << p.m_Name << "拿着" << p.m_Phone.m_PName << endl;
}
int main()
{

	test01();

	return 0;
}*/

//静态成员变量
//所有对象共享同一份数据
// 在编译阶段分配内存
// 类内声明，类外初始化
// 
//静态成员变量
//class Person
//{
//public:
//
//	static int m_A;
//
//private:
//	static int m_B;
//
//};
////类内声明，类外开始初试化
//int Person::m_A = 100;
//int Person::m_B = 100;
//
//void test01()
//{
//	Person p;
//	cout << p.m_A << endl;
//	Person p2;
//	p2.m_A = 200;
//	cout << p2.m_A << endl;
//
//}
//void test02()
//{
//	//静态成员变量 不属于某个对象上，所有对象都共享同一份数据
//	//因此静态成员变量有两种访问方式
//
//	//1.通过对象进行访问
//	//Person p3;
//	//cout << p3.m_A << endl;
//	
//	//2.通过类名进行访问
//	cout << Person::m_A << endl;
//   //cout << Person::m_B << endl;
//}
//int main()
//{
//	//test01();
//	test02();
//	return 0;
//}

//静态成员函数
//所有对象共享同一个函数
//静态成员函数只能访问静态成员变量
/*
class Person
{
public:
	//静态成员函数
	static void func()
	{
		m_A = 100;//静态成员函数可以访问静态成员变量
	
		cout << "static void func 调用" << endl;
	}

	static int m_A;// 静态成员变量
	int m_B;
};
int Person::m_A = 0;
void test01()
{
	//1.通过对象访问
	Person p;
	p.func();
	
	//2.通过类名访问
	Person::func();
}
int main()
{
	test01();
	return 0;
}*/


// Kernel定义
__global__ void MatAdd(float A[N][N], float B[N][N], float C[N][N])
{
	int i = blockIdx.x * blockDim.x + threadIdx.x;
	int j = blockIdx.y * blockDim.y + threadIdx.y;
	if (i < N && j < N)
		C[i][j] = A[i][j] + B[i][j];
}

int main()
{
	...
		// Kernel 线程配置
		dim3 threadsPerBlock(16, 16);
	dim3 numBlocks(N / threadsPerBlock.x, N / threadsPerBlock.y);
	// kernel调用
	MatAdd << <numBlocks, threadsPerBlock >> > (A, B, C);
	...
}
