#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>

//位段内容
struct S
{
	char a : 3;
	char b : 4;
	char c : 5;
	char d : 4;
};

int main()
{
	struct S s = {0};
	s.a = 10;
	s.b = 12;
	s.c = 3;
	s.d = 4;

	return 0;
}

#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>

//位段内容
//struct S
//{
//	char a : 3;
//	char b : 4;
//	char c : 5;
//	char d : 4;
//};
//
//int main()
//{
//	struct S s = {0};
//	s.a = 10;
//	s.b = 12;
//	s.c = 3;
//	s.d = 4;
//
//	return 0;
//}

//枚举---一一列举，它是一种类型

//enum Day
//{
//	//枚举可能取值-常量
//	Mon,
//	Tues,
//	Wed,
//	Thur,
//	Fri,
//	Sat,
//	Sun
//};
//
//enum Sex
//{
//	Male = 1,
//	Femal = 4,
//	Secret = 5
//};
//
//enum Color
//{
//	RED,
//	GREEN,
//	BLUE
//};

//#define RED 0
//#define GREEN 1
//#define BLUE 2

//C语言的源代码——预编译----》编译------》链接-----》可执行程序



//
//int main()
//{
//	//enum Sex s = Male;
//	//enum Color c = BLUE;
//	//printf("%d %d %d\n", RED, GREEN, BLUE);
//	//printf("%d %d %d\n", Male, Femal, Secret);
//	return 0;
//}

//联合（共用体），联合的成员共用同一块空间
//union Un
//{
//	char c;
//	int i;
//};
//int main()
//{
//	union Un u;
//	printf("%d\n", sizeof(u));
//	printf("%p\n", &u);
//	printf("%p\n", &(u.c));
//	printf("%p\n", &(u.i));
//
//	return 0;
//}


int main()
{
	int a = 0x11223344;
	//低地址------------------------高地址
	//
	//讨论一个数据放在内存中存放的字节的顺序
	



	return 0;
}


//传统的写法
//int main()
//{
//	//int a = 0x11223344;
//	//低地址------------------------高地址
//	//
//	//讨论一个数据放在内存中存放的字节的顺序
//	int a = 1;
//	if (*(char*)&a)
//		printf("小端\n");
//	else
//		printf("大端\n");
//
//	return 0;
//}

//共用体创建方法
int check_sys()
{
	union
	{
		char c;
		int i;
	}u;

	u.i = 1;
	return u.c;	
}

int main()
{
	int a = 1;
	int ret = check_sys();
	if (ret == 1)
	{
		printf("小端\n");
	}
	else
		printf("大端\n");

	return 0;
}

