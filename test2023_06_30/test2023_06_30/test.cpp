#define _CRT_SECURE_NO_WARNINGS 1

#include <stdio.h>
#include <string.h>

/*************************** 模拟输入数据 ********************************/
float input_data[251] = {
    0.00, 0.86, 1.59, 2.10, 2.35, 2.35, 2.18, 1.94, 1.76, 1.73, 1.90, 2.26, 2.75,
    3.24, 3.63, 3.80, 3.70, 3.30, 2.68, 1.93, 1.18, 0.54, 0.11, -0.10, -0.11,
    0.00, 0.11, 0.10, -0.11, -0.54, -1.18, -1.93, -2.68, -3.30, -3.70, -3.80,
    -3.63, -3.24, -2.75, -2.26, -1.90, -1.73, -1.76, -1.94, -2.18, -2.35, -2.35,
    -2.10, -1.59, -0.86, 0.00, 0.86, 1.59, 2.10, 2.35, 2.35, 2.18, 1.94, 1.76,
    1.73, 1.90, 2.26, 2.75, 3.24, 3.63, 3.80, 3.70, 3.30, 2.68, 1.93, 1.18,
    0.54, 0.11, -0.10, -0.11, 0.00, 0.11, 0.10, -0.11, -0.54, -1.18, -1.93,
    -2.68, -3.30, -3.70, -3.80, -3.63, -3.24, -2.75, -2.26, -1.90, -1.73,
    -1.76, -1.94, -2.18, -2.35, -2.35, -2.10, -1.59, -0.86, 0.00, 0.86, 1.59,
    2.10, 2.35, 2.35, 2.18, 1.94, 1.76, 1.73, 1.90, 2.26, 2.75, 3.24, 3.63,
    3.80, 3.70, 3.30, 2.68, 1.93, 1.18, 0.54, 0.11, -0.10, -0.11, 0.00, 0.11,
    0.10, -0.11, -0.54, -1.18, -1.93, -2.68, -3.30, -3.70, -3.80, -3.63, -3.24,
    -2.75, -2.26, -1.90, -1.73, -1.76, -1.94, -2.18, -2.35, -2.35, -2.10, -1.59,
    -0.86, 0.00, 0.86, 1.59, 2.10, 2.35, 2.35, 2.18, 1.94, 1.76, 1.73, 1.90, 2.26,
    2.75, 3.24, 3.63, 3.80, 3.70, 3.30, 2.68, 1.93, 1.18, 0.54, 0.11, -0.10, -0.11,
    0.00, 0.11, 0.10, -0.11, -0.54, -1.18, -1.93, -2.68, -3.30, -3.70, -3.80, -3.63,
    -3.24, -2.75, -2.26, -1.90, -1.73, -1.76, -1.94, -2.18, -2.35, -2.35, -2.10, -1.59,
    -0.86, 0.00, 0.86, 1.59, 2.10, 2.35, 2.35, 2.18, 1.94, 1.76, 1.73, 1.90, 2.26, 2.75,
    3.24, 3.63, 3.80, 3.70, 3.30, 2.68, 1.93, 1.18, 0.54, 0.11, -0.10, -0.11, 0.00, 0.11,
    0.10, -0.11, -0.54, -1.18, -1.93, -2.68, -3.30, -3.70, -3.80, -3.63, -3.24, -2.75,
    -2.26, -1.90, -1.73, -1.76, -1.94, -2.18, -2.35, -2.35, -2.10, -1.59, -0.86, 0.00 };



float fc = 2.0f;     //截止频率
float Ts = 0.02f;    //采样周期
float pi = 3.14159f; //π
float alpha = 0;     //滤波系数

/************************ 滤波器初始化 alpha *****************************/
void low_pass_filter_init(void)
{
    float b = 2.0 * pi * fc * Ts;
    alpha = b / (b + 1);
}

float get_data(void)
{
    static int i = 0;
    return (input_data[i++]);
    if (i == 251) //轮回
        i = 0;
}

float low_pass_filter(float value)
{
    static float out_last = 0; //上一次滤波值
    float out;

    /***************** 如果第一次进入，则给 out_last 赋值 ******************/
    static char fisrt_flag = 1;
    if (fisrt_flag == 1)
    {
        fisrt_flag = 0;
        out_last = value;
    }

    /*************************** 一阶滤波 *********************************/
    out = out_last + alpha * (value - out_last);
    out_last = out;

    return out;
}

void main1(void)
{
    float result[251];

    low_pass_filter_init();
    
    for (int i = 0; i < 251; i++)
    {
        result[i] = low_pass_filter(get_data());
        
        printf("%0.2f  ", result[i]);
    }
}




//
//#include <vector>
//#include <iostream>
//using namespace std;
//
//const struct comDouble
//{
//    vector<double> real;
//    vector<double> imag;
//
//    double time;
//};
//
//comDouble filter(vector<double> b, double a, comDouble x)
//{
//    /*
//     注意：该函数仅实现了a为标量且为1时的函数滤波！！！
//     参数介绍：
//     b：		滤波器系数
//     a：		分母系数
//     x:		复数
//     x.real: 复数实部
//     x.imag: 复数虚部
//
//     Y：		复数滤波结果
//     Y.real：复数实部滤波结果
//     Y.imag：复数虚部滤波结果
//
//     公式：(a = 1时)
//     当 i < 滤波器阶数 时有:
//         Y[i] = ∑b[j]*x[i-j] (下限j=0, 上限j<i)
//     当 i > 滤波器阶数 时有:
//         Y[i] = ∑b[j]*x[i-j] (下限j=0, 上限j<滤波器阶数)
//    */
//    comDouble Y;
//
//
//    for (unsigned int i = 0; i < b.size(); i++)
//    {
//        double real = 0.0;
//        double imag = 0.0;
//
//        for (unsigned int j = 0; j <= i; j++)
//        {
//            real += b[j] * x.real[i - j];
//            imag += b[j] * x.imag[i - j];
//        }
//        
//        Y.real.push_back(real);
//        
//        Y.imag.push_back(imag);
//    }
//    
//    for (unsigned int i = b.size(); i < x.real.size(); i++)
//    {
//        double real = 0.0;
//        double imag = 0.0;
//
//        for (unsigned int j = 0; j < b.size(); j++)
//        {
//            real += b[j] * x.real[i - j];
//            imag += b[j] * x.imag[i - j];
//        }
//
//        Y.real.push_back(real);
//        Y.imag.push_back(imag);
//    }
//    
//    return Y;
//}


//#include<stdio.h>
//#include <process.h>
//int a = 5;//全局变量a,写在文件的开头，省略extern
//void Print_a()
//{
//	a = 10;//全局变量被屏蔽
//	printf("%d\n", a);
//}
//int main(void)
//{
//	printf("%d\n", a);
//	Print_a();
//	printf("%d\n", a);
//	system("pause");
//	return 0;
//}


