#define _CRT_SECURE_NO_WARNINGS 1

#include <stdio.h>
#include <string.h>
#include <assert.h>
#include <ctype.h>

//int strncmp(const char* string1, const char* string2, size_t count);

/*
int main()
{
	//strncmp--字符串比较
	const char* p1 = "abcdef";
	const char* p2 = "abcqwer";
	//int ret=strcmp(p1,p2);
	int ret=strncmp(p1,p2,3);
	printf("%d\n", ret);
	return 0;
}*/
/*
//strstr--查找字符串
//kmp算法——查找字符串
char* my_strstr(const char* p1, const char* p2)
{
	assert(p1 != NULL);
	assert(p2 != NULL);
	char* s1 = NULL;
	char* s2 = NULL;
	char* cur = p1;

	if (*p2 == '\0')
	{
		return (char*)p1;
	}
	while (*cur)
	{
		s1 = cur;
		s2 = (char*)p1;
		while ((*s2 != '\0') && (*s1 != '\0') && (*s1 == *s2))
		{
			s1++;
			s2++;
		}
		if (*s2 == '\0')
		{
			return cur;					//找到了字符串
		}
		if (*s1 == '\0')
		{
			return NULL;					//找到了字符串
		}
		cur++;
	}
	return NULL;						//找不到字符串
}
int main()
{
	char* p1 = "abcdefabcdef";
	char* p2 = "def";
	//char* ret=strstr(p1, p2);
	char* ret = my_strstr(p1, p2);

	if (ret == NULL)
	{
		printf("子串不存在\n");
	}
	else
	{
		printf("%s\n", ret);
	}
	return 0;
}
*/
//
//int main()
//{
//
//	char arr[] = "zpw@biteu.tech";
//	char* p = "@.";
//	char buf[1024] = { 0 };
//	strcpy( buf,arr );
//	//切割buf中的字符串
//	/*char* ret = strtok(arr, p);
//	printf("%s\n", ret);
//	ret = strtok(NULL, p);
//	printf("%s\n", ret);
//	ret = strtok(NULL, p);
//	printf("%s\n", ret);*/
//	char ret = NULL;
//	for (ret = strtok(arr, p); ret != NULL; ret = strtok(NULL, p))
//	{
//		printf("%s\n", ret);
//	}
//	return 0;
//}

/*
int main()
{
	//错误码
	//0---No error
	//1---Operation not permitted
	//2---No such file or directory
	//....
	//errno 是一个全局的错误码的变量
	//当c语言的库函数在执行过程中，发生了错误，就会把对应的错误码赋值到errno中
	
	//char* str = strerror(2);
	//printf("%s\n", str);

	//打开文件
	FILE* pf = fopen("text.txt", "r");
	if (pf == NULL)
	{
		printf("%s\n", strerror(errno));
	}
	else
	{
		printf("open file success\n");
	}
	return 0;
}*/

int main()
{
	//char ch = 'w';
	//int ret = islower(ch);
	//printf("%d\n", ret);*/

	char arr[] = "I am a student";
	int i = 0;
	while (arr[i])
	{
		if (isupper(arr[i]))
		{
			arr[i] = tolower(arr[i]);
		}
		i++;
	}
	printf("%s\n", arr);

	return 0;
}

