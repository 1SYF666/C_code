#define _CRT_SECURE_NO_WARNINGS 1

#include <stdio.h>
//数组指针——指针
//
//int mian()
//{
//	int* p = NULL;//p是整形指针，指向整型的指针 --存放整形的地址
//	char* pc = NULL;//pc是字符指针，指向字符的指针 --可以存放字符的地址
//	int* p = NULL;//p是整形指针，指向整型的指针
//	int* p = NULL;//p是整形指针，指向整型的指针
//
//	//int arr[10] = { 0 };
//	//arr-首元素地址
//	//&arr[0]-首元素地址
//	//&arr-数组的地址
//	
//	int arr[10] = { 1,2,3,4,5,6,7,8,9,10 };
//	int* p[10] = &arr;//数组的地址要存起来，存放指针的数组
//	//由于[]的优先级高于*，那么故p和方块[]结合的话那是一个数组，因此p就不可能是指针。
//	
//	int(*p)[10] = &arr;
//	//上面的p就是数组指针，首先和*号结合，一旦和*结合说明它是一个指针，
//	//后面的方块[]说明我指向的是一个数组，每个元素是Int 整形
//
//
//	return 0;
//}

/*
int main()
{
	char* arr[5];//数组元素类型是char*，元素是指针，这里是一个数组指针
	//写一个数组指针
	//char (*pa)[5] = &arr;
	//pa是一个指针变量名，*这里告诉我它是一个指针，说明pa是一个指针
	//[5]告诉我们pa指向的数组是5个元素，pa指向的数组的元素类型是char*
	char* (*pa)[5] = &arr;
	return 0;
}
*/


//int main()
//{
	/*
	int arr[10] = { 1,2,3,4,5,6,7,8,9,10 };
	int(*pa)[10] = &arr;
	int i = 0;
	for (i = 0; i < 10; i++)
	{
		printf("%d ", (*pa)[i]);
	}*/
	/*
	int arr[10] = { 1,2,3,4,5,6,7,8,9,10 };
	int(*pa)[10] = &arr;  //数组指针 *pa指向首元素地址
	int i = 0;
	for (i = 0; i < 10; i++)
	{
		printf("%d ", *(*pa+i));
	}*/
	/*
	int arr[10] = { 1,2,3,4,5,6,7,8,9,10 };
	int* p = arr;  //整型指针 *p指向首元素地址
	int i = 0;
	for (i = 0; i < 10; i++)
	{
		printf("%d ",*(p+i));
	}*/
	//return 0;
//}

/*
void print1(int arr[3][5], int x, int y)
{
	int i = 0;
	int j = 0;
	for (i = 0; i < x; i++)
	{
		for (j = 0; j < y; j++)
		{
			printf("%d ", arr[i][j]);
		}
		printf("\n");
	}
}
*/
/*
void print2(int (*p)[5], int x, int y)
{
	int i = 0;
	int j = 0;
	for (i = 0; i < x; i++)
	{
		for (j = 0; j < y; j++)
		{
			printf("%d ", *(*(p+i)+j));
			//p是指向一行的，p+i指向第i行，
			//当我指向i行之后呢，*(p+i)解应用找到了这一行
			// 而找到这一行之后呢，其实表示拿到了这一行的数组名
			// 找到这一行的数组名之后呢，*(p+i)+j找到了这一行第j列的元素的地址
			// 找到了这一行第j列的元素的地址之后，*(*(p+i)+j)解应用是找到这个元素
		//printf("%d ", (*(p+i))[j]);
			//p是指向一行的，p+i指向第i行，
			//当我指向i行之后呢，*(p+i)解应用找到了这一行
			// 而找到这一行之后呢，其实表示拿到了这一行的数组名
			// 找到这一行的数组名之后呢，(*(p+i))[j]找到了这一行第j列的元素

		}
		printf("\n");
	}
}
*/
int main()
{
	int arr[3][5] = { {1,2,3,4,5},{3,4,5,6,7},{5,6,7,8,9} };
	//print1(arr, 3, 5);
	//print2(arr, 3, 5);

	int arr1[10] = { 1,2,3,4,5,6,7,8,9,10 };
	int i = 0;
	int* p = arr;
	for (i = 0; i < 10; i++)
	{


	}
	return 0;
}
