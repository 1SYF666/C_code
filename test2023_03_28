#include <stdio.h>
struct stu
{
	//char* name;
	char name[20];
	int age;
};
int cmp_int(const void* e1, const void* e2)
{
	//比较两个整型值的函数
	return *(int*)e1 - *(int*)e2;
}
int cmp_float(const void* e1, const void* e2)
{
	//比较两个整型值的函数
	if (*(float*)e1 < *(float*)e2)
		return -1;
	else if (*(float*)e1 == *(float*)e2)
		return 0;
	else
		return 1;
}
int cmp_stu_by_age(const void* e1, const void* e2)
{
	return ((struct stu*)e1)->age - ((struct stu*)e2)->age;
}
int cmp_stu_by_name(const void* e1, const void* e2)
{
	return strcmp(((struct stu*)e1)->name, ((struct stu*)e2)->name);
}
void swap1(char* buf1, char* buf2,int width)
{
	int i = 0;
	for (i = 0; i < width; i++)
	{
		char temp = *buf1;
		*buf1 = *buf2;
		*buf2 = temp;
		buf1++;
		buf2++;
	}

}
void bubble_qsort(void* base, int num, int width, int(* compare)(const void* elem1, const void* elem2))
{
	int i = 0;
	int j = 0;
	int temp = 0;
	//行数
	for (i = 0; i <  num - 1; i++)
	{
		//趟数
		for (j = 0; j < num - 1 - i; j++)
		{
			if((compare((char*)base + j * width, (char*)base + (j + 1) * width))>0)
				swap1((char*)base + j * width, (char*)base + (j + 1) * width,width);
		}
	}


}

void test5()
{
	struct stu s[3] = { {"zhangsan",20},{"lisi",30},{"wangwu",10} };
	int sz = sizeof(s) / sizeof(s[0]);
	bubble_qsort(s, sz, sizeof(s[0]), cmp_stu_by_age);
	int i = 0;
	for (i = 0; i < sz; i++)
	{
		printf("%s	", s[i].name);
		printf("%d\n", s[i].age);
	}
}

int main()
{
	//bubble_sort(arr, sz);
	//test1();
	//test2();
	//test3();
	printf("********************\n");
	//test4();
	printf("********************\n");
	test5();
	return 0;
}

#define _CRT_SECURE_NO_WARNINGS 1

#include <stdio.h>
#include <string.h>
/*
int main()
{
	//一维数组
	int a[] = { 1,2,3,4 };
	printf("%d\n", sizeof(a));			//4*4=16
	//数组名是首元素的地址，但是有两个例外，
	//1.sizeof(数组名)这里的数组名表示整个数组
	//2.&数组名-数组名表示整个数组
	//除此之外所有的数组名都是首元素地址
	printf("%d\n", sizeof(a + 0));		//a在这里表示是首元素地址，a+0还是首元素地址
	printf("%d\n", sizeof(*a));			//a在这里表示是首元素地址,*a找到首元素，而首元素所占4个字节
	printf("%d\n", sizeof(a + 1));		//a在这里表示是首元素地址，a+1还是第二个元素地址
	printf("%d\n", sizeof(a[1]));		//4
	printf("%d\n", sizeof(&a));			//&a是数组的地址，但是地址的大小就是4个或8个字节
	printf("%d\n", sizeof(*&a));	//16，&a是数组的地址，解引用访问的是数组
	//&a是数组的地址
	//&a+1是跳过一个数组，但是
	//还是一个地址，地址放到sizeof里面就是4个或8个字节
	printf("%d\n", sizeof(&a + 1));			
	printf("%d\n", sizeof(&a[0]));		//4或8
	printf("%d\n", sizeof(&a[0] + 1));	//第二个元素的地址，4或者8
	//字符数组
	char arr[] = { 'a','b','c','d','e','f' };
	printf("%d\n", sizeof(arr));		//6
	printf("%d\n", sizeof(arr + 0));	//arr这里表示首元素地址，arr+0也表示地址，故结果是4字节或者8字节
	printf("%d\n", sizeof(*arr));		//1
	printf("%d\n", sizeof(arr[1]));		//1
	printf("%d\n", sizeof(&arr));		//4或8
	printf("%d\n", sizeof(&arr + 1));	//4或者8
	printf("%d\n", sizeof(&arr[0] + 1));//4或者8
	//由于后面里面放的是什么也不清楚，故是随机值
	printf("%d\n", strlen(arr));		//arr是首元素地址，从首元素开始数
	printf("%d\n", strlen(arr + 0));	//随机值
	//*arr是首元素哎，相当于把首元素传给strlen,就把‘a’--97,即从地址97处开始数
	//printf("%d\n", strlen(*arr));		//err
	//printf("%d\n", strlen(arr[1]));		//err
	printf("%d\n", strlen(&arr));		//随机值
	printf("%d\n", strlen(&arr + 1));	//&arr + 1表示跳过该数组长度，随机值-6
	printf("%d\n", strlen(&arr[0] + 1));//随机值-1
	return 0;
}*/

/*
int mian()
{
	char arr[] = "abcdef";
	//sizeof(arr)计算的是数组的大小，单位是字节
	printf("%d\n", sizeof(arr));			//7,字符串后面还有一个\0
	printf("%d\n", sizeof(arr + 0));		//表示地址，4或者8
	printf("%d\n", sizeof(*arr));			//首元素，1个字节
	printf("%d\n", sizeof(arr[1]));			//1个字节
	printf("%d\n", sizeof(&arr));			//数组的地址，4或者8
	printf("%d\n", sizeof(&arr + 1));		//4或者8
	printf("%d\n", sizeof(&arr[0] + 1));	//4或者8
	//strlen求的长度不包括\0，单位是字节
	printf("%d\n", strlen(arr));			//首元素地址，从首元素开始数，一共6个字节
	printf("%d\n", strlen(arr + 0));		//arr + 0，arr是数组名，表示首元素地址，6
	//printf("%d\n", strlen(*arr));			//err
	//printf("%d\n", strlen(arr[1]));			//err
	printf("%d\n", strlen(&arr));			//&arr表示整个数组的地址，从该地址开始数，故6个字节
	printf("%d\n", strlen(&arr + 1));		//随机值
	printf("%d\n", strlen(&arr[0] + 1));	//从第二个开始数,5个字节
	return 0;
}*/
/*
int main()
{
	char* p = "abcdef";						//常量字符串的地址放到了指针p里,即是首元素a的地址放进去的
	printf("%d\n", sizeof(p));				//p里放的地址，4或者8
	printf("%d\n", sizeof(p + 1));			//p+1计算到的是字符b的地址，结果是4或者8
	printf("%d\n", sizeof(*p));				//*p是字符a,结果是1个字节
	//int arr[10]; arr[0]==*(arr+0),  p[0]==*(p+0)==‘a’
	printf("%d\n", sizeof(p[0]));			//p[0]表示字符a，故1个字节
	printf("%d\n", sizeof(&p));				//4或者8，即取出了p的地址
	printf("%d\n", sizeof(&p + 1));			//4或者8，即取出了p的地址
	printf("%d\n", sizeof(&p[0] + 1));		//先取出的是‘a’的地址，再加一个字节是‘b’的地址	
	printf("%d\n", strlen(p));				//6
	printf("%d\n", strlen(p + 1));			//5
	printf("%d\n", strlen(*p));//err,从97当作地址开始数，会报错
	printf("%d\n", strlen(p[0]));//err
	//因为传给strlen的是p的地址，所以从此地址处开始数，
	//而p里放的是a的地址（0x00665544），比如小端存储，44 55 66 00,这里数是3
	printf("%d\n", strlen(&p));				//随机值
	printf("%d\n", strlen(&p + 1));			//随机值&p与&p+1中间正好跳过了p这个单元
	printf("%d\n", strlen(&p[0] + 1));		//从b的地址开始数，一共有5个
	return 0;
}*/

int main()
{
	//二维数组
	int a[3][4] = { 0 };
	printf("%d\n", sizeof(a));
	printf("%d\n", sizeof(a[0][0]));
	printf("%d\n", sizeof(a[0]));
	printf("%d\n", sizeof(a[0] + 1));
	printf("%d\n", sizeof(*(a[0] + 1)));
	printf("%d\n", sizeof(a + 1));
	printf("%d\n", sizeof(*(a + 1)));
	printf("%d\n", sizeof(&a[0] + 1));
	printf("%d\n", sizeof(*(&a[0] + 1)));
	printf("%d\n", sizeof(*a));
	printf("%d\n", sizeof(a[3]));
	return 0;
}





